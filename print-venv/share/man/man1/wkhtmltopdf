.TH WKHTMLTOPDF 1 "2009 February 23"

.SH Name
wkhtmltopdf \- html to pdf converter


.SH Synopsis
  wkhtmltopdf [GLOBAL OPTION]... [OBJECT]... <output file>


.SH Document objects
wkhtmltopdf is able to put several objects into the output file, an object is either a single webpage, a cover webpage or a table of content.  The objects are put into the output document in the order they are specified on the command line, options can be specified on a per object basis or in the global options area. Options from the Global Options section can only be placed in the global options area

A page objects puts the content of a single webpage into the output document.

  (page)? <input url/file name> [PAGE OPTION]...

Options for the page object can be placed in the global options and the page options areas. The applicable options can be found in the Page Options and Headers And Footer Options sections.

A cover objects puts the content of a single webpage into the output document, the page does not appear in the table of content, and does not have headers and footers.

  cover <input url/file name> [PAGE OPTION]...

All options that can be specified for a page object can also be specified for a cover.

A table of content object inserts a table of content into the output document.

  toc [TOC OPTION]...

All options that can be specified for a page object can also be specified for a toc, further more the options from the TOC Options section can also be applied. The table of content is generated via XSLT which means that it can be styled to look however you want it to look. To get an aide of how to do this you can dump the default xslt document by supplying the \-\-dump\-default\-toc\-xsl, and the outline it works on by supplying \-\-dump\-outline, see the Outline Options section.


.SH Description
Converts one or more HTML pages into a PDF document, using wkhtmltopdf patched qt.


.SH Global Options
.PD 0
.TP
\fB    \-\-collate\fR
Collate when printing multiple copies
.TP
\fB    \-\-no-collate\fR
Do not collate when printing multiple copies
.TP
\fB    \-\-cookie-jar\fR \fI<path>\fR
Read and write cookies from and to the supplied cookie jar file
.TP
\fB    \-\-copies\fR \fI<number>\fR
Number of copies to print into the pdf file
.TP
\fB\-d, \-\-dpi\fR \fI<dpi>\fR
Change the dpi explicitly (this has no effect on X11 based systems)
.TP
\fB\-H, \-\-extended-help\fR
Display more extensive help, detailing less common command switches
.TP
\fB\-g, \-\-grayscale\fR
PDF will be generated in grayscale
.TP
\fB\-h, \-\-help\fR
Display help
.TP
\fB    \-\-htmldoc\fR
Output program html help
.TP
\fB    \-\-image-dpi\fR \fI<integer>\fR
When embedding images scale them down to this dpi
.TP
\fB    \-\-image-quality\fR \fI<integer>\fR
When jpeg compressing images use this quality
.TP
\fB    \-\-license\fR
Output license information and exit
.TP
\fB\-l, \-\-lowquality\fR
Generates lower quality pdf/ps. Useful to shrink the result document space
.TP
\fB    \-\-manpage\fR
Output program man page
.TP
\fB\-B, \-\-margin-bottom\fR \fI<unitreal>\fR
Set the page bottom margin
.TP
\fB\-L, \-\-margin-left\fR \fI<unitreal>\fR
Set the page left margin
.TP
\fB\-R, \-\-margin-right\fR \fI<unitreal>\fR
Set the page right margin
.TP
\fB\-T, \-\-margin-top\fR \fI<unitreal>\fR
Set the page top margin
.TP
\fB\-O, \-\-orientation\fR \fI<orientation>\fR
Set orientation to Landscape or Portrait
.TP
\fB    \-\-page-height\fR \fI<unitreal>\fR
Page height
.TP
\fB\-s, \-\-page-size\fR \fI<Size>\fR
Set paper size to: A4, Letter, etc.
.TP
\fB    \-\-page-width\fR \fI<unitreal>\fR
Page width
.TP
\fB    \-\-no-pdf-compression\fR
Do not use lossless compression on pdf objects
.TP
\fB\-q, \-\-quiet\fR
Be less verbose
.TP
\fB    \-\-read-args-from-stdin\fR
Read command line arguments from stdin
.TP
\fB    \-\-readme\fR
Output program readme
.TP
\fB    \-\-title\fR \fI<text>\fR
The title of the generated pdf file (The title of the first document is used if not specified)
.TP
\fB    \-\-use-xserver\fR
Use the X server (some plugins and other stuff might not work without X11)
.TP
\fB\-V, \-\-version\fR
Output version information and exit
.PD


.SH Outline Options
.PD 0
.TP
\fB    \-\-dump-default-toc-xsl\fR
Dump the default TOC xsl style sheet to stdout
.TP
\fB    \-\-dump-outline\fR \fI<file>\fR
Dump the outline to a file
.TP
\fB    \-\-outline\fR
Put an outline into the pdf
.TP
\fB    \-\-no-outline\fR
Do not put an outline into the pdf
.TP
\fB    \-\-outline-depth\fR \fI<level>\fR
Set the depth of the outline
.PD


.SH Page Options
.PD 0
.TP
\fB    \-\-allow\fR \fI<path>\fR
Allow the file or files from the specified folder to be loaded (repeatable)
.TP
\fB    \-\-background\fR
Do print background
.TP
\fB    \-\-no-background\fR
Do not print background
.TP
\fB    \-\-bypass-proxy-for\fR \fI<value>\fR
Bypass proxy for host (repeatable)
.TP
\fB    \-\-cache-dir\fR \fI<path>\fR
Web cache directory
.TP
\fB    \-\-checkbox-checked-svg\fR \fI<path>\fR
Use this SVG file when rendering checked checkboxes
.TP
\fB    \-\-checkbox-svg\fR \fI<path>\fR
Use this SVG file when rendering unchecked checkboxes
.TP
\fB    \-\-cookie\fR \fI<name>\fR \fI<value>\fR
Set an additional cookie (repeatable), value should be url encoded.
.TP
\fB    \-\-custom-header\fR \fI<name>\fR \fI<value>\fR
Set an additional HTTP header (repeatable)
.TP
\fB    \-\-custom-header-propagation\fR
Add HTTP headers specified by \-\-custom\-header for each resource request.
.TP
\fB    \-\-no-custom-header-propagation\fR
Do not add HTTP headers specified by \-\-custom\-header for each resource request.
.TP
\fB    \-\-debug-javascript\fR
Show javascript debugging output
.TP
\fB    \-\-no-debug-javascript\fR
Do not show javascript debugging output
.TP
\fB    \-\-default-header\fR
Add a default header, with the name of the page to the left, and the page number to the right, this is short for: \-\-header\-left='[webpage]' \-\-header\-right='[page]/[toPage]' \-\-top 2cm \-\-header\-line
.TP
\fB    \-\-encoding\fR \fI<encoding>\fR
Set the default text encoding, for input
.TP
\fB    \-\-disable-external-links\fR
Do not make links to remote web pages
.TP
\fB    \-\-enable-external-links\fR
Make links to remote web pages
.TP
\fB    \-\-disable-forms\fR
Do not turn HTML form fields into pdf form fields
.TP
\fB    \-\-enable-forms\fR
Turn HTML form fields into pdf form fields
.TP
\fB    \-\-images\fR
Do load or print images
.TP
\fB    \-\-no-images\fR
Do not load or print images
.TP
\fB    \-\-disable-internal-links\fR
Do not make local links
.TP
\fB    \-\-enable-internal-links\fR
Make local links
.TP
\fB\-n, \-\-disable-javascript\fR
Do not allow web pages to run javascript
.TP
\fB    \-\-enable-javascript\fR
Do allow web pages to run javascript
.TP
\fB    \-\-javascript-delay\fR \fI<msec>\fR
Wait some milliseconds for javascript finish
.TP
\fB    \-\-keep-relative-links\fR
Keep relative external links as relative external links
.TP
\fB    \-\-load-error-handling\fR \fI<handler>\fR
Specify how to handle pages that fail to load: abort, ignore or skip
.TP
\fB    \-\-load-media-error-handling\fR \fI<handler>\fR
Specify how to handle media files that fail to load: abort, ignore or skip
.TP
\fB    \-\-disable-local-file-access\fR
Do not allowed conversion of a local file to read in other local files, unless explicitly allowed with \-\-allow
.TP
\fB    \-\-enable-local-file-access\fR
Allowed conversion of a local file to read in other local files.
.TP
\fB    \-\-minimum-font-size\fR \fI<int>\fR
Minimum font size
.TP
\fB    \-\-exclude-from-outline\fR
Do not include the page in the table of contents and outlines
.TP
\fB    \-\-include-in-outline\fR
Include the page in the table of contents and outlines
.TP
\fB    \-\-page-offset\fR \fI<offset>\fR
Set the starting page number
.TP
\fB    \-\-password\fR \fI<password>\fR
HTTP Authentication password
.TP
\fB    \-\-disable-plugins\fR
Disable installed plugins
.TP
\fB    \-\-enable-plugins\fR
Enable installed plugins (plugins will likely not work)
.TP
\fB    \-\-post\fR \fI<name>\fR \fI<value>\fR
Add an additional post field (repeatable)
.TP
\fB    \-\-post-file\fR \fI<name>\fR \fI<path>\fR
Post an additional file (repeatable)
.TP
\fB    \-\-print-media-type\fR
Use print media\-type instead of screen
.TP
\fB    \-\-no-print-media-type\fR
Do not use print media\-type instead of screen
.TP
\fB\-p, \-\-proxy\fR \fI<proxy>\fR
Use a proxy
.TP
\fB    \-\-radiobutton-checked-svg\fR \fI<path>\fR
Use this SVG file when rendering checked radiobuttons
.TP
\fB    \-\-radiobutton-svg\fR \fI<path>\fR
Use this SVG file when rendering unchecked radiobuttons
.TP
\fB    \-\-resolve-relative-links\fR
Resolve relative external links into absolute links
.TP
\fB    \-\-run-script\fR \fI<js>\fR
Run this additional javascript after the page is done loading (repeatable)
.TP
\fB    \-\-disable-smart-shrinking\fR
Disable the intelligent shrinking strategy used by WebKit that makes the pixel/dpi ratio none constant
.TP
\fB    \-\-enable-smart-shrinking\fR
Enable the intelligent shrinking strategy used by WebKit that makes the pixel/dpi ratio none constant
.TP
\fB    \-\-stop-slow-scripts\fR
Stop slow running javascripts
.TP
\fB    \-\-no-stop-slow-scripts\fR
Do not Stop slow running javascripts
.TP
\fB    \-\-disable-toc-back-links\fR
Do not link from section header to toc
.TP
\fB    \-\-enable-toc-back-links\fR
Link from section header to toc
.TP
\fB    \-\-user-style-sheet\fR \fI<url>\fR
Specify a user style sheet, to load with every page
.TP
\fB    \-\-username\fR \fI<username>\fR
HTTP Authentication username
.TP
\fB    \-\-viewport-size\fR \fI<>\fR
Set viewport size if you have custom scrollbars or css attribute overflow to emulate window size
.TP
\fB    \-\-window-status\fR \fI<windowStatus>\fR
Wait until window.status is equal to this string before rendering page
.TP
\fB    \-\-zoom\fR \fI<float>\fR
Use this zoom factor
.PD


.SH Headers And Footer Options
.PD 0
.TP
\fB    \-\-footer-center\fR \fI<text>\fR
Centered footer text
.TP
\fB    \-\-footer-font-name\fR \fI<name>\fR
Set footer font name
.TP
\fB    \-\-footer-font-size\fR \fI<size>\fR
Set footer font size
.TP
\fB    \-\-footer-html\fR \fI<url>\fR
Adds a html footer
.TP
\fB    \-\-footer-left\fR \fI<text>\fR
Left aligned footer text
.TP
\fB    \-\-footer-line\fR
Display line above the footer
.TP
\fB    \-\-no-footer-line\fR
Do not display line above the footer
.TP
\fB    \-\-footer-right\fR \fI<text>\fR
Right aligned footer text
.TP
\fB    \-\-footer-spacing\fR \fI<real>\fR
Spacing between footer and content in mm
.TP
\fB    \-\-header-center\fR \fI<text>\fR
Centered header text
.TP
\fB    \-\-header-font-name\fR \fI<name>\fR
Set header font name
.TP
\fB    \-\-header-font-size\fR \fI<size>\fR
Set header font size
.TP
\fB    \-\-header-html\fR \fI<url>\fR
Adds a html header
.TP
\fB    \-\-header-left\fR \fI<text>\fR
Left aligned header text
.TP
\fB    \-\-header-line\fR
Display line below the header
.TP
\fB    \-\-no-header-line\fR
Do not display line below the header
.TP
\fB    \-\-header-right\fR \fI<text>\fR
Right aligned header text
.TP
\fB    \-\-header-spacing\fR \fI<real>\fR
Spacing between header and content in mm
.TP
\fB    \-\-replace\fR \fI<name>\fR \fI<value>\fR
Replace [name] with value in header and footer (repeatable)
.PD


.SH TOC Options
.PD 0
.TP
\fB    \-\-disable-dotted-lines\fR
Do not use dotted lines in the toc
.TP
\fB    \-\-toc-header-text\fR \fI<text>\fR
The header text of the toc
.TP
\fB    \-\-toc-level-indentation\fR \fI<width>\fR
For each level of headings in the toc indent by this length
.TP
\fB    \-\-disable-toc-links\fR
Do not link from toc to sections
.TP
\fB    \-\-toc-text-size-shrink\fR \fI<real>\fR
For each level of headings in the toc the font is scaled by this factor
.TP
\fB    \-\-xsl-style-sheet\fR \fI<file>\fR
Use the supplied xsl style sheet for printing the table of content
.PD


.SH Specifying A Proxy
By default proxy information will be read from the environment variables: proxy, all_proxy and http_proxy, proxy options can also by specified with the \-p switch

  <type> := "http://" | "socks5://"
  <serif> := <username> (":" <password>)? "@"
  <proxy> := "None" | <type>? <string>? <host> (":" <port>)?

Here are some examples (In case you are unfamiliar with the BNF):

  http://user:password@myproxyserver:8080
  socks5://myproxyserver
  None


.SH Footers And Headers
Headers and footers can be added to the document by the \-\-header\-* and \-\-footer* arguments respectfully.  In header and footer text string supplied to e.g. \-\-header\-left, the following variables will be substituted.

   * [page]       Replaced by the number of the pages currently being printed
   * [frompage]   Replaced by the number of the first page to be printed
   * [topage]     Replaced by the number of the last page to be printed
   * [webpage]    Replaced by the URL of the page being printed
   * [section]    Replaced by the name of the current section
   * [subsection] Replaced by the name of the current subsection
   * [date]       Replaced by the current date in system local format
   * [isodate]    Replaced by the current date in ISO 8601 extended format
   * [time]       Replaced by the current time in system local format
   * [title]      Replaced by the title of the of the current page object
   * [doctitle]   Replaced by the title of the output document
   * [sitepage]   Replaced by the number of the page in the current site being converted
   * [sitepages]  Replaced by the number of pages in the current site being converted

As an example specifying \-\-header\-right "Page [page] of [toPage]", will result in the text "Page x of y" where x is the number of the current page and y is the number of the last page, to appear in the upper left corner in the document.

Headers and footers can also be supplied with HTML documents. As an example one could specify \-\-header\-html header.html, and use the following content in header.html:

  <html><head><script>
  function subst() {
      var vars = {};
      var query_strings_from_url = document.location.search.substring(1).split('&');
      for (var query_string in query_strings_from_url) {
          if (query_strings_from_url.hasOwnProperty(query_string)) {
              var temp_var = query_strings_from_url[query_string].split('=', 2);
              vars[temp_var[0]] = decodeURI(temp_var[1]);
          }
      }
      var css_selector_classes = ['page', 'frompage', 'topage', 'webpage', 'section', 'subsection', 'date', 'isodate', 'time', 'title', 'doctitle', 'sitepage', 'sitepages'];
      for (var css_class in css_selector_classes) {
          if (css_selector_classes.hasOwnProperty(css_class)) {
              var element = document.getElementsByClassName(css_selector_classes[css_class]);
              for (var j = 0; j < element.length; ++j) {
                  element[j].textContent = vars[css_selector_classes[css_class]];
              }
          }
      }
  }
  </script></head><body style="border:0; margin: 0;" onload="subst()">
  <table style="border\-bottom: 1px solid black; width: 100%">
    <tr>
      <td class="section"></td>
      <td style="text\-align:right">
        Page <span class="page"></span> of <span class="topage"></span>
      </td>
    </tr>
  </table>
  </body></html>

As can be seen from the example, the arguments are sent to the header/footer html documents in get fashion.


.SH Outlines
Wkhtmltopdf with patched qt has support for PDF outlines also known as book marks, this can be enabled by specifying the \-\-outline switch. The outlines are generated based on the <h?> tags, for a in\-depth description of how this is done see the Table Of Content section. 

The outline tree can sometimes be very deep, if the <h?> tags where spread to generous in the HTML document.  The \-\-outline\-depth switch can be used to bound this.


.SH Table Of Content
A table of content can be added to the document by adding a toc object to the command line. For example:

  wkhtmltopdf toc http://qt\-project.org/doc/qt\-4.8/qstring.html qstring.pdf

The table of content is generated based on the H tags in the input documents. First a XML document is generated, then it is converted to HTML using XSLT.

The generated XML document can be viewed by dumping it to a file using the \-\-dump\-outline switch. For example:

  wkhtmltopdf \-\-dump\-outline toc.xml http://qt\-project.org/doc/qt\-4.8/qstring.html qstring.pdf

The XSLT document can be specified using the \-\-xsl\-style\-sheet switch. For example:

  wkhtmltopdf toc \-\-xsl\-style\-sheet my.xsl http://qt\-project.org/doc/qt\-4.8/qstring.html qstring.pdf

The \-\-dump\-default\-toc\-xsl switch can be used to dump the default XSLT style sheet to stdout. This is a good start for writing your own style sheet

  wkhtmltopdf \-\-dump\-default\-toc\-xsl

The XML document is in the namespace "http://wkhtmltopdf.org/outline" it has a root node called "outline" which contains a number of "item" nodes. An item can contain any number of item. These are the outline subsections to the section the item represents. A item node has the following attributes:

 * "title" the name of the section.
 * "page" the page number the section occurs on.
 * "link" a URL that links to the section.
 * "backLink" the name of the anchor the section will link back to.

The remaining TOC options only affect the default style sheet so they will not work when specifying a custom style sheet.


.SH Page sizes
The default page size of the rendered document is A4, but using this \-\-page\-size optionthis can be changed to almost anything else, such as: A3, Letter and Legal.  For a full list of supported pages sizes please see <http://qt-project.org/doc/qt-4.8/qprinter.html#PaperSize-enum>.

For a more fine grained control over the page size the \-\-page\-height and \-\-page\-width options may be used


.SH Reading arguments from stdin
If you need to convert a lot of pages in a batch, and you feel that wkhtmltopdf is a bit to slow to start up, then you should try \-\-read\-args\-from\-stdin,

When \-\-read\-args\-from\-stdin each line of input sent to wkhtmltopdf on stdin will act as a separate invocation of wkhtmltopdf, with the arguments specified on the given line combined with the arguments given to wkhtmltopdf

For example one could do the following:

  echo "http://qt\-project.org/doc/qt\-4.8/qapplication.html qapplication.pdf" >> cmds
  echo "cover google.com http://en.wikipedia.org/wiki/Qt_(software) qt.pdf" >> cmds
  wkhtmltopdf \-\-read\-args\-from\-stdin \-\-book < cmds


.SH Page Breaking
The current page breaking algorithm of WebKit leaves much to be desired. Basically WebKit will render everything into one long page, and then cut it up into pages. This means that if you have two columns of text where one is vertically shifted by half a line. Then WebKit will cut a line into to pieces display the top half on one page. And the bottom half on another page. It will also break image in two and so on.  If you are using the patched version of QT you can use the CSS page\-break\-inside property to remedy this somewhat. There is no easy solution to this problem, until this is solved try organizing your HTML documents such that it contains many lines on which pages can be cut cleanly.


.SH Contact
If you experience bugs or want to request new features please visit <https://github.com/wkhtmltopdf/wkhtmltopdf/issues>


.SH Authors
  Jakob Truelsen      <antialize@gmail.com>
  Ashish Kulkarni     <kulkarni.ashish@gmail.com>
  Jan Habermann       <jan@habermann24.com>
  Pablo Ruiz García   <pablo.ruiz@gmail.com>
  Trevor North        <trevor@blubolt.com>
  pussbb              <pussbb@gmail.com>
  Nate Pinchot        <nate.pinchot@gmail.com>
  Kasper F. Brandt    <poizan@poizan.dk>
  peterrehm           <peter.rehm@renvest.de>
  Ruslan Grabovoy     <kudgo.test@gmail.com>
  Renan Gonçalves     <renan.saddam@gmail.com>
  Douglas Bagnall     <douglas@paradise.net.nz>
  Christian Sciberras <uuf6429@gmail.com>
  Aaron Stone         <aaron@serendipity.cx>
  Костадин Дамянов    <maxmight@gmail.com>
  Todd Fisher         <todd.fisher@gmail.com>
  Tobin Juday         <tobinibot@gmail.com>
  Sven Nierlein       <sven@nierlein.org>
  Steve Shreeve       <steve.shreeve@gmail.com>
  Sem                 <spam@esemi.ru>
  Pankaj Jangid       <pankaj.jangid@gmail.com>
  Oleg Kostyuk        <cub.uanic@gmail.com>
  Nolan Neustaeter    <github@noolan.ca>
  Matthieu Bontemps   <matthieu.bontemps@gmail.com>
  Kurt Revis          <krevis@snoize.com>
  Erling Linde        <erlingwl@gmail.com>
  Bill Kuker          <bkuker@billkuker.com>
  Benoit Garret       <benoit.garret@gmail.com>
  Adam Thorsen        <adam.thorsen@gmail.com>
  Emmanuel Bouthenot  <kolter@openics.org>
  Artem Butusov       <art.sormy@gmail.com>
  Michael Nitze       <michael.nitze@online.de>
  theirix             <theirix@gmail.com>
  Kay Lukas           <kay.lukas@gmail.com>
  Emil Lerch          <emil@lerch.org>
  rainabba
  Mehdi Abbad
  Lyes Amazouz
  Pascal Bach
  Mário Silva


